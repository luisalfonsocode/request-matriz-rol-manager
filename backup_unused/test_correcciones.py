#!/usr/bin/env python3
"""
Script para probar las correcciones de extracci√≥n de c√≥digos y edici√≥n de ticket.
"""

import sys
from pathlib import Path
import re

# A√±adir src al path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))


def test_extraccion_codigos():
    """Prueba la nueva l√≥gica de extracci√≥n de c√≥digos de aplicaci√≥n."""
    print("üß™ PRUEBA DE EXTRACCI√ìN DE C√ìDIGOS DE APLICACI√ìN")
    print("=" * 60)

    # Casos de prueba
    casos_prueba = [
        "APF2_QASD1_SSSS_CASD1_",
        "FCVE2_ATLA_FIEC_CASD1_",
        "_1212DDD_",  # Caso problem√°tico reportado
        "_ABCD_EFGH_",
        "XXXX_YYYY_",  # Sin guiones bajos al inicio
        "_ZZZZ",  # Sin gui√≥n bajo al final
        "_TEST_DEMO_PROD_",
        "_12AB_",  # Con n√∫meros
        "_ABC_",  # Solo 3 caracteres
        "_ABCDE_",  # 5 caracteres
    ]

    def extraer_codigos_aplicacion_corregido(grupos_red):
        """Nueva l√≥gica corregida."""
        codigos = set()

        for grupo in grupos_red:
            # Buscar patrones de aplicaci√≥n: _XXXX_ (rodeado de guiones bajos)
            patron = r"_([A-Z]{4})_"
            matches = re.findall(patron, grupo)
            for match in matches:
                codigos.add(match)

        return sorted(list(codigos))

    def extraer_codigos_aplicacion_anterior(grupos_red):
        """L√≥gica anterior (problem√°tica)."""
        codigos = set()

        for grupo in grupos_red:
            # Dividir por guiones bajos y tomar elementos de 4 caracteres
            partes = grupo.split("_")
            for parte in partes:
                if len(parte) == 4 and parte.isalpha():
                    codigos.add(parte)

        return sorted(list(codigos))

    print("\nüìã Resultados de extracci√≥n:")
    print("-" * 60)
    print(f"{'Grupo de Red':<25} {'Anterior':<15} {'Corregido':<15} {'Estado'}")
    print("-" * 60)

    for caso in casos_prueba:
        resultado_anterior = extraer_codigos_aplicacion_anterior([caso])
        resultado_corregido = extraer_codigos_aplicacion_corregido([caso])

        # Determinar si hay diferencia
        if resultado_anterior != resultado_corregido:
            estado = "‚úÖ Corregido"
        else:
            estado = "‚ö™ Sin cambio"

        print(
            f"{caso:<25} {str(resultado_anterior):<15} {str(resultado_corregido):<15} {estado}"
        )

    print("\nüéØ CASOS ESPEC√çFICOS:")
    print("-" * 40)

    # Caso problem√°tico espec√≠fico
    caso_problema = "_1212DDD_"
    anterior = extraer_codigos_aplicacion_anterior([caso_problema])
    corregido = extraer_codigos_aplicacion_corregido([caso_problema])

    print(f"üìç Caso problem√°tico reportado: {caso_problema}")
    print(f"   L√≥gica anterior: {anterior} ‚ùå (Incorrecto - detectaba 1212)")
    print(f"   L√≥gica corregida: {corregido} ‚úÖ (Correcto - no detecta nada)")

    # Casos v√°lidos
    casos_validos = ["_ABCD_EFGH_", "_TEST_DEMO_"]
    for caso in casos_validos:
        resultado = extraer_codigos_aplicacion_corregido([caso])
        print(f"üìç Caso v√°lido: {caso}")
        print(f"   C√≥digos extra√≠dos: {resultado} ‚úÖ")


def test_info_edicion_grilla():
    """Muestra informaci√≥n sobre la nueva funcionalidad de edici√≥n en grilla."""
    print("\n\nüîß NUEVA FUNCIONALIDAD: EDICI√ìN EN GRILLA")
    print("=" * 60)

    print("üìù INSTRUCCIONES DE USO:")
    print("-" * 30)
    print("1. Abra la aplicaci√≥n (ejecutar_app.py)")
    print("2. Vaya a la pesta√±a 'Gesti√≥n de Solicitudes'")
    print("3. Para editar ESTADO:")
    print("   ‚Ä¢ Haga doble clic en la columna 'Estado'")
    print("   ‚Ä¢ Seleccione el nuevo estado del dropdown")
    print("   ‚Ä¢ Se aplicar√°n las validaciones autom√°ticamente")
    print("4. Para editar TICKET HELPDESK:")
    print("   ‚Ä¢ Haga doble clic en la columna 'Ticket Helpdesk'")
    print("   ‚Ä¢ Escriba el nuevo n√∫mero de ticket")
    print("   ‚Ä¢ Presione Enter para guardar o Escape para cancelar")

    print("\n‚ö° VALIDACIONES AUTOM√ÅTICAS:")
    print("-" * 30)
    print("‚Ä¢ Estado 'En solicitud de conformidades' ‚Üí 'En Helpdesk': Pide ticket")
    print("‚Ä¢ Estado 'En Helpdesk' ‚Üí 'Atendido': Pide observaciones")
    print("‚Ä¢ Estado ‚Üí 'Cerrado': Pide confirmaci√≥n")
    print("‚Ä¢ Ticket Helpdesk: Acepta cualquier texto (n√∫meros, letras, etc.)")

    print("\nüé® EXPERIENCIA DE USUARIO:")
    print("-" * 30)
    print("‚úÖ Edici√≥n in-place (directo en la grilla)")
    print("‚úÖ Validaciones inmediatas")
    print("‚úÖ Feedback visual al usuario")
    print("‚úÖ Cancelar con Escape")
    print("‚úÖ Guardar con Enter")


if __name__ == "__main__":
    test_extraccion_codigos()
    test_info_edicion_grilla()
    print("\n" + "=" * 60)
    print("‚úÖ Todas las pruebas completadas")
    print("üöÄ ¬°Las correcciones est√°n listas para usar!")
