"""
Aplicaci√≥n principal con pesta√±as para la gesti√≥n completa de matrices de rol.

Incluye:
1. Solicitud de nuevas matrices (pesta√±a 1)
2. Editor de autorizadores (pesta√±a 2)
3. Gesti√≥n de solicitudes (pesta√±a 3)
"""

import tkinter as tk
from tkinter import ttk, messagebox
import customtkinter as ctk
from .solicitud_matriz import SolicitudMatrizFrame
from .autorizadores_editor import AutorizadoresEditorFrame
from .gestion_solicitudes import GestionSolicitudesFrame
from ..data.gestor_solicitudes import GestorSolicitudes


class AplicacionMatrizRol(ctk.CTk):
    """Aplicaci√≥n principal con sistema de pesta√±as."""

    def __init__(self):
        """Inicializa la aplicaci√≥n principal."""
        super().__init__()

        # Configuraci√≥n de la ventana
        self.title("üîê Sistema de Gesti√≥n de Matrices de Rol")
        self.geometry("1000x700")

        # Configurar tema
        ctk.set_appearance_mode("light")
        ctk.set_default_color_theme("blue")

        # Inicializar gestor de solicitudes
        self.gestor_solicitudes = GestorSolicitudes()

        # Variables compartidas
        self.grupos_red_actuales = []
        self.datos_autorizadores_actuales = []

        # Grupos predefinidos del sistema original
        self.grupos_predefinidos = ["APF2_QASD1_SSSS_CASD1_", "FCVE2_ATLA_FIEC_CASD1_"]

        self.configurar_interfaz()

    def configurar_interfaz(self):
        """Configura la interfaz con pesta√±as."""
        # Crear notebook (pesta√±as)
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill="both", expand=True, padx=10, pady=10)

        # Pesta√±a 1: Solicitud de Matriz
        self.frame_solicitud = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.frame_solicitud, text="üìù Nueva Solicitud")

        # Pesta√±a 2: Editor de Autorizadores - OCULTA (no se usa)
        # self.frame_autorizadores = ctk.CTkFrame(self.notebook)
        # self.notebook.add(self.frame_autorizadores, text="üë• Editar Autorizadores")

        # Pesta√±a 3: Gesti√≥n de Solicitudes (ahora ser√° la pesta√±a 2)
        self.frame_gestion = ctk.CTkFrame(self.notebook)
        self.notebook.add(self.frame_gestion, text="üìã Gesti√≥n de Solicitudes")

        self.configurar_pestana_solicitud()
        # self.configurar_pestana_autorizadores()  # No se usa
        self.configurar_pestana_gestion()

        # Eventos para actualizar datos entre pesta√±as
        self.notebook.bind("<<NotebookTabChanged>>", self.on_cambio_pestana)

    def configurar_pestana_solicitud(self):
        """Configura la primera pesta√±a de solicitud."""
        # Usar el frame original de solicitud
        print(
            f"üîÑ DEBUG: Creando SolicitudMatrizFrame con callback: {self.on_autorizadores_guardados}"
        )
        self.solicitud_frame = SolicitudMatrizFrame(
            self.frame_solicitud, callback_autorizadores=self.on_autorizadores_guardados
        )
        self.solicitud_frame.pack(fill="both", expand=True)

        # Conectar el callback para cuando se confirme la selecci√≥n
        self.solicitud_frame.callback_confirmacion = self.on_solicitud_confirmada

    def configurar_pestana_autorizadores(self):
        """Configura la segunda pesta√±a de autorizadores - DESHABILITADA."""
        # Esta pesta√±a ha sido ocultada ya que no se usa
        # El editor de autorizadores se maneja desde la pesta√±a de solicitud
        pass

    def configurar_pestana_gestion(self):
        """Configura la tercera pesta√±a de gesti√≥n."""
        # Crear el frame de gesti√≥n de solicitudes pasando el gestor compartido
        self.gestion_solicitudes = GestionSolicitudesFrame(
            self.frame_gestion, self.gestor_solicitudes
        )
        self.gestion_solicitudes.pack(fill="both", expand=True)

    def ir_a_autorizadores(self):
        """Cambia a la pesta√±a de autorizadores y configura los datos."""
        # Extraer c√≥digos de aplicaci√≥n de los grupos
        codigos = self.extraer_codigos_aplicacion()

        if not codigos:
            messagebox.showerror(
                "Error", "No se pudieron extraer c√≥digos de aplicaci√≥n"
            )
            return

        # Configurar el editor de autorizadores
        self.configurar_editor_autorizadores(codigos)

        # No cambiar a pesta√±a de autorizadores (est√° oculta)
        # self.notebook.select(1)

    def on_solicitud_confirmada(self, matrices_seleccionadas, grupos_red):
        """Maneja la confirmaci√≥n de la solicitud desde el primer tab."""
        # Actualizar las variables compartidas
        self.grupos_red_actuales = grupos_red

        # Extraer c√≥digos de aplicaci√≥n
        codigos = self.extraer_codigos_aplicacion_de_grupos(grupos_red)

        if codigos:
            # Configurar el editor de autorizadores
            self.configurar_editor_autorizadores(codigos)
            # No cambiar a pesta√±a de autorizadores (est√° oculta)
            # self.notebook.select(1)
        else:
            messagebox.showerror(
                "Error", "No se pudieron extraer c√≥digos de aplicaci√≥n de los grupos"
            )

    def extraer_codigos_aplicacion_de_grupos(self, grupos_red):
        """Extrae c√≥digos de aplicaci√≥n de una lista de grupos espec√≠fica."""
        codigos = set()

        for grupo in grupos_red:
            # Buscar patrones de aplicaci√≥n: _XXXX_ (rodeado de guiones bajos)
            import re

            # Buscar c√≥digos de 4 letras rodeados por guiones bajos
            patron = r"_([A-Z]{4})_"
            matches = re.findall(patron, grupo)
            for match in matches:
                codigos.add(match)

        return sorted(list(codigos))

    def extraer_codigos_aplicacion(self):
        """Extrae c√≥digos de aplicaci√≥n √∫nicos de los grupos de red."""
        codigos = set()

        for grupo in self.grupos_predefinidos:
            # Dividir por guiones bajos y tomar elementos de 4 caracteres
            partes = grupo.split("_")
            for parte in partes:
                if len(parte) == 4 and parte.isalpha():
                    codigos.add(parte)

        return sorted(list(codigos))

    def configurar_editor_autorizadores(self, codigos_aplicacion):
        """Configura el editor de autorizadores con los c√≥digos extra√≠dos - ADAPTADO."""
        print(
            f"üîÑ DEBUG: configurar_editor_autorizadores llamado con {len(codigos_aplicacion)} c√≥digos"
        )

        # La pesta√±a de autorizadores ha sido removida, pero mantenemos la l√≥gica
        # para crear el editor cuando se necesite desde la solicitud

        # Nota: El editor se crea din√°micamente desde solicitud_matriz.py
        # Este m√©todo ahora solo mantiene la compatibilidad
        self.editor_autorizadores = None

        print(f"üîó DEBUG: Configuraci√≥n adaptada - editor ser√° creado din√°micamente")

    def on_autorizadores_guardados(self, datos_autorizadores):
        """Maneja el evento cuando se guardan los autorizadores."""
        print("\nüîî CALLBACK: on_autorizadores_guardados ejecut√°ndose...")
        print(f"üìä Datos autorizadores recibidos: {len(datos_autorizadores)} elementos")

        # Crear la solicitud en el gestor
        try:
            # Obtener grupos actuales del editor en lugar de usar predefinidos
            grupos_actuales = []
            if hasattr(self, "editor_autorizadores") and hasattr(
                self.editor_autorizadores, "grupos_red"
            ):
                grupos_actuales = self.editor_autorizadores.grupos_red
                print(f"üìÇ Grupos del editor: {grupos_actuales}")
            else:
                # Fallback a grupos predefinidos
                grupos_actuales = self.grupos_predefinidos
                print(f"üìÇ Usando grupos predefinidos: {grupos_actuales}")

            # Verificar que tenemos grupos
            if not grupos_actuales:
                print("‚ùå Error: No hay grupos de red definidos")
                messagebox.showerror(
                    "Error",
                    "No se han definido grupos de red. Por favor, configure los grupos primero.",
                )
                return

            print("üîß Creando solicitud en el gestor...")
            solicitud = self.gestor_solicitudes.crear_solicitud(
                grupos_actuales, datos_autorizadores
            )
            print(f"‚úÖ Solicitud creada: {solicitud.id_solicitud}")

            # Forzar guardado y recarga
            print("üíæ Guardando solicitudes...")
            self.gestor_solicitudes.guardar_solicitudes()
            print("‚úÖ Solicitudes guardadas")

            # Mostrar mensaje de √©xito
            messagebox.showinfo(
                "Solicitud Creada",
                f"‚úÖ Solicitud creada exitosamente!\n\n"
                f"ID: {solicitud.id_solicitud}\n"
                f"Estado: {solicitud.estado.value.title()}\n\n"
                f"Puede hacer seguimiento en la pesta√±a 'Gesti√≥n de Solicitudes'",
            )

            # Forzar actualizaci√≥n de la pesta√±a de gesti√≥n en el siguiente ciclo
            if hasattr(self, "gestion_solicitudes"):
                print("üîÑ Programando actualizaci√≥n de gesti√≥n tras crear solicitud...")
                # Usar after() para asegurar que la actualizaci√≥n se ejecute
                # despu√©s de que todo el guardado est√© completo
                self.after(100, self._actualizar_gestion_tras_crear_solicitud)
            else:
                print("‚ö†Ô∏è Warning: gestion_solicitudes no est√° disponible")

        except Exception as e:
            print(f"‚ùå Error en callback: {e}")
            import traceback

            traceback.print_exc()
            messagebox.showerror("Error", f"Error creando solicitud: {e}")

    def _actualizar_gestion_tras_crear_solicitud(self):
        """Actualiza la gesti√≥n de solicitudes despu√©s de crear una nueva."""
        try:
            print("üîÑ Ejecutando actualizaci√≥n diferida de gesti√≥n...")
            # Forzar recarga completa
            self.gestor_solicitudes.cargar_solicitudes()
            # Actualizar la interfaz
            self.gestion_solicitudes.actualizar_lista_solicitudes()
            print("‚úÖ Actualizaci√≥n de gesti√≥n completada")
        except Exception as e:
            print(f"‚ùå Error en actualizaci√≥n diferida: {e}")

    def on_cambio_pestana(self, event):
        """Maneja el cambio entre pesta√±as."""
        pesta√±a_seleccionada = self.notebook.index(self.notebook.select())

        # Si cambia a gesti√≥n de solicitudes (ahora es √≠ndice 1), forzar actualizaci√≥n
        if pesta√±a_seleccionada == 1 and hasattr(self, "gestion_solicitudes"):
            print("üîÑ Cambio a pesta√±a de Gesti√≥n - Programando actualizaci√≥n...")
            # Usar after() para asegurar que la actualizaci√≥n se ejecute
            # en el siguiente ciclo del event loop
            self.after(50, self._actualizar_gestion_por_cambio_pestana)

    def _actualizar_gestion_por_cambio_pestana(self):
        """Actualiza la gesti√≥n cuando se cambia a la pesta√±a."""
        try:
            print("üîÑ Ejecutando actualizaci√≥n por cambio de pesta√±a...")
            # Forzar recarga del gestor desde archivo
            self.gestor_solicitudes.cargar_solicitudes()
            # Actualizar la interfaz
            self.gestion_solicitudes.actualizar_lista_solicitudes()
            print("‚úÖ Actualizaci√≥n por cambio de pesta√±a completada")
        except Exception as e:
            print(f"‚ùå Error en actualizaci√≥n por cambio de pesta√±a: {e}")


def main():
    """Funci√≥n principal para ejecutar la aplicaci√≥n."""
    app = AplicacionMatrizRol()
    app.mainloop()


if __name__ == "__main__":
    main()
